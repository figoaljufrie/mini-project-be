// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum CouponType {
  REFERRAL
  ORGANIZER
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  username String @unique
  password String
  role     Role   @default(CUSTOMER)

  referralCode String? @unique
  referredById Int?
  referredBy   User?   @relation("UserReferrals", fields: [referredById], references: [id])
  referees     User[]  @relation("UserReferrals")

  points             Int                 @default(0)
  pointsTransactions PointTransactions[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  coupons            Coupon[]
  organizerCoupons   Coupon[]            @relation("OrganizerCoupons")
  Transactions       Transaction[]
  events             Event[] // events yang dibuat oleh organizer
  reviews            Review[] // reviews yang dibuat oleh user
}

model Coupon {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  discountIdr Int
  type        CouponType
  status      CouponStatus @default(AVAILABLE)
  expiresAt   DateTime?
  usedAt      DateTime?
  createdAt   DateTime     @default(now())

  // referral-specific:
  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  // organizer-specific:
  used        Int? @default(0) // total uses
  quantity    Int? // coupon availability
  organizerId Int?

  transactions Transaction[]

  organizer User? @relation("OrganizerCoupons", fields: [organizerId], references: [id])
}

model PointTransactions {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  amount    Int
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Transaction {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int
  status    TxStatus
  totalIdr  Int
  createdAt DateTime @default(now())

  couponId Int?
  coupon   Coupon? @relation(fields: [couponId], references: [id])
  event    Event?  @relation(fields: [eventId], references: [eventId])

  @@index([eventId, status, createdAt])
  @@index([userId, createdAt])
}

model Event {
  eventId     Int      @id @default(autoincrement())
  organizerId Int
  title       String
  category    String
  location    String
  startsAt    DateTime
  endsAt      DateTime
  quantity    Int
  priceIdr    Int
  isFree      Boolean  @default(false)
  description String
  ticketTypes String? // misalnya VIP, Regular, dsb.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizer    User          @relation(fields: [organizerId], references: [id])
  transactions Transaction[]
  promotions   Promotion[]
  reviews      Review[]
}

model Promotion {
  id        Int      @id @default(autoincrement())
  eventId   Int
  discount  Int
  startDate DateTime
  endDate   DateTime

  event Event @relation(fields: [eventId], references: [eventId])
}

model Review {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [eventId])
  user  User  @relation(fields: [userId], references: [id])
}

enum CouponStatus {
  AVAILABLE
  USED
  EXPIRED
}

enum TxStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}
